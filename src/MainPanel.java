
import java.awt.Color;
import java.awt.Graphics;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;



import DesignPackage.DisplayClass;
import DesignPackage.PathFind;
import DesignPackage.Properties;
import DesignPackage.SortingAlgorithms;
import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.util.concurrent.ThreadLocalRandom;

import LinkedList.LinkedList;
import java.awt.Dimension;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusListener;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.accessibility.AccessibleRole;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author zalve
 */
public class MainPanel extends JPanel {

    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        initComponents();
        
      
       
//        setFocusable(true); 
//        requestFocus();
        
    }


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setNextFocusableComponent(this);
        setVerifyInputWhenFocusTarget(false);
        setLayout(null);

        jPanel1.setBackground(new java.awt.Color(37, 51, 65));
        jPanel1.setLayout(null);

        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(0, 670, 260, 30);

        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(110, 50, 150, 30);

        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setFocusPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);
        jButton5.setBounds(110, 230, 150, 50);

        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setFocusPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6);
        jButton6.setBounds(110, 290, 150, 50);

        jSlider1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jSlider1MouseDragged(evt);
            }
        });
        jSlider1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSlider1PropertyChange(evt);
            }
        });
        jPanel1.add(jSlider1);
        jSlider1.setBounds(90, 400, 140, 20);

        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(110, 170, 150, 50);

        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setFocusPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);
        jButton4.setBounds(110, 110, 150, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 270, 700);

        add(jPanel1);
        jPanel1.setBounds(1100, 0, 260, 700);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(null);

        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton7);
        jButton7.setBounds(220, 0, 200, 40);

        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setFocusPainted(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton8);
        jButton8.setBounds(420, 0, 190, 40);

        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.setFocusPainted(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton9);
        jButton9.setBounds(810, 0, 170, 40);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/t1.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(10, 0, 1360, 40);

        add(jPanel2);
        jPanel2.setBounds(-10, 710, 1370, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         if(running == false){
            jSlider1.setValue(10);
            thread.interrupt();
            Thread t = new Thread(new Runnable(){
                @Override
                public void run() {
                   //speed = jSlider1.getValue();
                    randomizer();
                }
            });
            t.start();
         }
         running = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(running == false){
            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1.png"))); 
            Thread t = new Thread(new Runnable(){
                @Override
                public void run() {
                    speed = jSlider1.getValue();
                    bubbleSort();
                }
            });
            t.start();
        }
        running = true;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
            if(running == false){ 
                jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/3.png"))); 
                Thread t = new Thread(new Runnable(){
                    @Override
                    public void run() {
                        speed = jSlider1.getValue();
                       insertionSort();
                    }
                });
                t.start();
            }
            running = true;
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       if(running == false){
            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/2.png"))); 
            Thread t = new Thread(new Runnable(){
                @Override
                public void run() {
                    speed = jSlider1.getValue();
                   selectionSort();
                }
            });
            t.start();
       }
       running = true;
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(running == false){
            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/4.png"))); 
            Thread t = new Thread(new Runnable(){
                @Override
                public void run() {
                    speed = jSlider1.getValue();
                   mergeSort();
                }
            });
            t.start();
        }
        running = true;
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(running == false) {
            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/5.png"))); 
            Thread t = new Thread(new Runnable(){
                @Override
                public void run() {
                    speed = jSlider1.getValue();
                   quickSort();
                }
            });
            t.start();
        }
        running = true;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jSlider1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSlider1PropertyChange
        // TODO add your handling code here:
        speed = jSlider1.getValue();
      
    }//GEN-LAST:event_jSlider1PropertyChange

    private void jSlider1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MouseDragged
        // TODO add your handling code here:
        speed = jSlider1.getValue();
    }//GEN-LAST:event_jSlider1MouseDragged

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
    
    if(running == false){
        PathFinderInterface panel = new PathFinderInterface();
        // panel.setVisible(true);
        
            settings.board =  new int[ settings.ROWS][settings.COLUMNS];
            frame.getContentPane().removeAll();
         
            // refresh the panel.
           
           
            
            frame.add(panel);
            frame.setVisible(true);
            ImageIcon img = new ImageIcon("src\\DSicon.png");
            frame.setIconImage(img.getImage());
            
    }

      
     
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        
        if(running == false){
         FloodFillAlgorithm panel = new  FloodFillAlgorithm();
        // panel.setVisible(true);
        
            settings.board =  new int[ settings.ROWS][settings.COLUMNS];
            frame.getContentPane().removeAll();
         
            // refresh the panel.
           
           
            
            frame.add(panel);
            frame.setVisible(true);
            ImageIcon img = new ImageIcon("src\\DSicon.png");
            frame.setIconImage(img.getImage());
            
    }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
    if(running == false){
            SudokuPanel  panel = new SudokuPanel();
            // panel.setVisible(true);
        
            
            settings.board =  new int[ settings.ROWS][settings.COLUMNS];
            frame.getContentPane().removeAll();
            // refresh the panel.
           
           
            
            frame.add(panel);
            frame.setVisible(true);
            ImageIcon img = new ImageIcon("src\\DSicon.png");
            frame.setIconImage(img.getImage());
            
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    
    
    
    
        
  
    
        
    private static  Properties settings = new Properties();
    private static Timer timer;
    public static JFrame frame = new JFrame();
    private static int w=0,x=0,y=0,z=0,speed = 1;
    private static MainPanel n = new MainPanel();
    private static int pick = 0;
    private static Thread thread = new Thread();
    private static boolean running = false;
 //    public void paintComponent(Graphics g){
//        super.paintComponent(g);
//        draw(g);
//    }   
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        //=======================================================================
        for(int row = 0 ; row < 100; row++){
            for(int col = 0 ; col < 110; col++){
               int rgb[] = settings.COLORS[1];
                int red = rgb[0], green = rgb[1] , blue = rgb[2];
                g.setColor(new Color(red,green,blue));
                g.fillRect( (settings.SIZE/2)*col+(settings.GAP-3)*col ,
                                    (settings.SIZE/2)*row+(settings.GAP-6)*row,
                                    (settings.SIZE/2-4), (settings.SIZE/2-5));
            }
        }
        int change = 8;
        for(int k = 0 ; k <settings.ARRAYS.length ; k++){
            if( k == w)change = 3;
            else if( k == x)change = 4;
            else if( k == y)change = 5;
            else if( k == z)change = 6;
            else change = 8; 
            int rgb[] = settings.COLORS[change];
            
            int red = rgb[0], green = rgb[1] , blue = rgb[2];
            
            g.setColor(new Color(red,green,blue));
            g.fillRect(9*k+10,(settings.HEIGHT/2-settings.ARRAYS[k]*3)-30,5,settings.ARRAYS[k]*6   );
        }
        //=======================================================================
    }   
 

    public static void main(String[] args) throws Exception{
        ImageIcon img = new ImageIcon("src\\DSicon.png");
            frame.setIconImage(img.getImage());
        loadingForm form = new loadingForm();
         form.setVisible(false);
        form.dispose();
        frame.getContentPane().invalidate();
        frame.getContentPane().validate();
        frame.getContentPane().repaint();
         frame.getContentPane().removeAll();
        frame.setSize(settings.WIDTH,settings.HEIGHT);
        frame.setTitle(settings.TITLE);
        int[] rgb = settings.COLORS[0];
        int red = rgb[0];
        int green = rgb[1];
        int blue = rgb[2];
        int[] rgbs = settings.COLORS[0];
        int reds = rgbs[0] ,greens = rgbs[1],blues = rgbs[2];
        n.setBackground(new Color(reds,greens,blues));  
        if(settings.maximized)
            frame.setExtendedState(JFrame.MAXIMIZED_BOTH); 
        frame.setResizable(settings.resizezable);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
      
        frame.add(n);
       // frame.add( new PathFind());
        n.setLayout(null);  
        frame.setVisible(true);
        //b.addActionListener();
 
       
       
//        randomizer(); 
//        bubbleSort();
//        randomizer();
//        selectionSort();
//        randomizer();
//        insertionSort();
//        randomizer();
//        quickSort();
//        randomizer();
//        mergeSort();
        
        //new  DisplayClass();
        //n = new MainPanel();
        
       
            
        
        
        
    }
 
   
    public  void bubbleSort(){
         thread.run();
         speed = jSlider1.getValue();
         for(int i = settings.ARRAYS.length-1; i >= 0 ;i--    ){
            for(int j = 0 ; j < i ; j ++){
               // System.out.println(Arrays.toString(settings.ARRAYS));
               
               
                if(settings.ARRAYS[j] > settings.ARRAYS[j+1]){
                    int a = settings.ARRAYS[j];
                    settings.ARRAYS[j] = settings.ARRAYS[j+1];
                    settings.ARRAYS[j+1] =a ;
                    x = j+1;
                    y = j;
                }
                w = j;
                try { Thread.sleep(speed); } catch (Exception ex) {}
                n.repaint();
            } 
            z = i;
        }
         
         for(int i = 3; i  <  settings.ARRAYS.length ;i++    ){
            w = i;
            x = i-1;
            y = i-2;
            z = i-3;
            try { Thread.sleep(speed); } catch (Exception ex) {}
            n.repaint();}
         running = false;
    }
    
    public  void randomizer(){
        
       thread.run();
       speed = jSlider1.getValue();
       for(int k =0 ; k < 3  ; k++){
            LinkedList<Integer> list = new LinkedList();
        while(list.size() < 116){
            int num= ThreadLocalRandom.current().nextInt(1, 115+ 1);
            x = list.size();
            if(!list.contains(num)){
                list.push(num);
                w = num;
                try { Thread.sleep(1); } catch (Exception ex) {}
                n.repaint();
            }
            y = num;
            try { Thread.sleep(1); } catch (Exception ex) {}
            n.repaint();
            for(int i = 0 ; i < list.size() ; i++){
                settings.ARRAYS[i] = list.get(i);
                x = i;
            }
        }
          for(int i = 0 ; i < settings.ARRAYS.length ; i++){
                settings.ARRAYS[i] = list.get(i);
                x = i;
                try { Thread.sleep(1); } catch (Exception ex) {}
            n.repaint();
            }
       }
       x = 0 ;
       y = 0;
       w= 0 ;
       z = 0;
       running = false;
       
       
    }
    //=======================================================================
    public void mergeSort(){
         thread.run();
         speed = jSlider1.getValue();
         _sort(settings.ARRAYS,0,settings.ARRAYS.length-1);
         for(int i = 3; i  <  settings.ARRAYS.length ;i++    ){
            w = i;
            x = i-1;
            y = i-2;
            z = i-3;
            try { Thread.sleep(speed); } catch (Exception ex) {}
            n.repaint();}
         running = false;
    }
     public void _sort(int arr[], int left, int right) { 
          thread.run();
          speed = jSlider1.getValue();
        if (left <  right){ 
            int m = (left+ right)/2; 
            _sort(arr, left, m); 
            _sort(arr , m+1,  right); 
            _merge(arr, left, m,  right); 
            x = m;
            y = left;
            z = right;
            try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
           
        } 
    } 
     public   void _merge(int arr[], int left, int middle, int right){
          thread.run();
          speed = jSlider1.getValue();
        int node1 =  middle - left + 1; 
        int node2 = right -  middle; 
        
        int Left1[] = new int [node1]; 
        int Right1[] = new int [node2]; 
   
        try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
        for (int i=0; i<node1; ++i) {
            Left1[i] = arr[left + i]; 
            w = left+1;
            try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
        }
        
        for (int j=0; j<node2; ++j) {
            Right1[j] = arr[ middle + 1+ j]; 
            w = middle + 1+ j;
            try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
        }
        
        
        int i = 0, j = 0; 
        int k = left; 
        
        while (i < node1 && j < node2){ 
            if (Left1[i] <= Right1[j])  { 
                arr[k] = Left1[i]; 
                i++; 
                
            }else{ 
                arr[k] = Right1[j]; 
                j++; 
                
            } 
            k++; 
            
            x = i;
            y= j;
            z = k;
            try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
        } 
        while (i < node1){ 
            arr[k] = Left1[i]; 
            i++; 
            k++; 
            x = i;
            y= j;
            z = k;
            try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
        } 
        while (j < node2){ 
            arr[k] = Right1[j]; 
            j++; 
            k++; 
            x = i;
            y= j;
            z = k;
            try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
        } 
    } 
   
     
    
    
    public  void quickSort(){
         thread.run();
         speed = jSlider1.getValue();
         _quickSort( settings.ARRAYS , 0 , settings.ARRAYS.length-1);
        for(int i = 3; i  <  settings.ARRAYS.length ;i++    ){
            w = i;
            x = i-1;
            y = i-2;
            z = i-3;
            try { Thread.sleep(speed); } catch (Exception ex) {}
            n.repaint();}
        running = false;
    }
    public   void  _quickSort(int[] data,int min,int max){
         thread.run();
         speed = jSlider1.getValue();
        if(min < max){
            int pivot = pivotLoc(data,min,max);
            _quickSort( settings.ARRAYS ,pivot+1, max);
            _quickSort( settings.ARRAYS ,min,pivot-1);
        }
          
    }
    public    int pivotLoc(int[] data,int min,int max){
         thread.run();
         speed = jSlider1.getValue();
        int pivot =  data[max];
        int left = min-1;
        for(int i = min ; i < max ; i ++ ){
            if(data[i] < pivot){
                left ++;
                int change = data[i];
                data[i] = data[left];
                data[left] = change;
            }
            x = i;
            y = left;
            w = max;
            z = min;
             try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
        }
        int change = data[max];
        data[max] = data[left+1];
        data[left+1] = change;
        return left+1;
    }
    
    
    
    
    
    public  void insertionSort(){
         thread.run();
         speed = jSlider1.getValue();
        for(int i = 0 ; i < settings.ARRAYS.length-1 ; i++ ){
            if(settings.ARRAYS[i] > settings.ARRAYS[i+1]){
                int j = i  ;
                while( j >= 0 && settings.ARRAYS[j] > settings.ARRAYS[j+1] ){
                    int var = settings.ARRAYS[j];
                    settings.ARRAYS[j] = settings.ARRAYS[j+1];
                    settings.ARRAYS[j+1] = var;
                    j--;
                    w = j;
                    z = j+1;
                    try { Thread.sleep(speed); } catch (Exception ex) {}
                    n.repaint();
                }
            y = j;
            }
            x = i;
            try { Thread.sleep(speed); } catch (Exception ex) {}
            n.repaint();
        }
         for(int i = 3; i  <  settings.ARRAYS.length ;i++    ){
            w = i;
            x = i-1;
            y = i-2;
            z = i-3;
            try { Thread.sleep(speed); } catch (Exception ex) {}
            n.repaint();}
         running = false;
     
    
    }
    public  void selectionSort(){
         thread.run();
         speed = jSlider1.getValue();
        for(int i = 0 ; i < settings.ARRAYS.length ; i ++){
            // Find minimum
            int min = Integer.MAX_VALUE;
            int getMinIndex = i;
            for(int j = i ; j < settings.ARRAYS.length ; j++){
                if(settings.ARRAYS[j] <  min){
                    getMinIndex = j;
                    min = settings.ARRAYS[j];
                }
                y = j;
                z = getMinIndex ;
                try { Thread.sleep(speed); } catch (Exception ex) {}
                n.repaint();
            }
            
            x = i;
       
            int var  = settings.ARRAYS[i];
            settings.ARRAYS[i] = settings.ARRAYS[getMinIndex];
            settings.ARRAYS[getMinIndex] = var;
          
           
        }
        for(int i = 3; i  <  settings.ARRAYS.length ;i++    ){
            w = i;
            x = i-1;
            y = i-2;
            z = i-3;
            try { Thread.sleep(speed); } catch (Exception ex) {}
            n.repaint();}
        running = false;
  
    }
    
  
 
//    public void draw(Graphics g){
//        
//        for(int row = 0 ; row < 100; row++){
//            for(int col = 0 ; col < 110; col++){
//               int rgb[] = settings.COLORS[1];
//                int red = rgb[0], green = rgb[1] , blue = rgb[2];
//                g.setColor(new Color(red,green,blue));
//                g.fillRect( (settings.SIZE/2)*col+(settings.GAP-3)*col ,
//                                    (settings.SIZE/2)*row+(settings.GAP-6)*row,
//                                    (settings.SIZE/2-4), (settings.SIZE/2-5));
//            }
//        }
//        int change = 8;
//        for(int k = 0 ; k <settings.ARRAYS.length ; k++){
//            if( k == w)change = 3;
//            else if( k == x)change = 4;
//            else if( k == y)change = 5;
//            else if( k == z)change = 6;
//            else change = 8; 
//            int rgb[] = settings.COLORS[change];
//            
//            int red = rgb[0], green = rgb[1] , blue = rgb[2];
//            
//            g.setColor(new Color(red,green,blue));
//            g.fillRect(9*k+10,(settings.HEIGHT/2-settings.ARRAYS[k]*3)-30,     5,settings.ARRAYS[k]*6   );
//           
//        }
//    }
 
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private static javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
